name: Release

on: workflow_dispatch

jobs:
    changes:
        name: Filter changes
        runs-on: ubuntu-latest
        # Set job outputs to values from filter step
        outputs:
            isNewVer: ${{ steps.filter.outputs.new-release-published }}
            newVer: ${{ steps.filter.outputs.release-version }}

        steps:
            - uses: actions/checkout@v4
              with:
                  fetch-depth: 0
                  persist-credentials: false

            - name: Detect version change
              uses: codfish/semantic-release-action@v3
              id: filter
              env:
                  GH_TOKEN: ${{ secrets.GH_TOKEN }}
              with:
                  dry-run: true
    ts-lint:
        name: Lint TS files
        runs-on: ubuntu-latest
        needs: changes
        if: needs.changes.outputs.isNewVer == 'true'

        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Setup node.js 18.x
              uses: actions/setup-node@v4
              with:
                  node-version: 18

            - name: Install pnpm
              uses: pnpm/action-setup@v2
              with:
                  version: 8
                  run_install: false

            - name: Get pnpm store directory
              shell: bash
              run: |
                  echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

            - name: Setup pnpm cache
              uses: actions/cache@v3
              with:
                  path: ${{ env.STORE_PATH }}
                  key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
                  restore-keys: |
                      ${{ runner.os }}-pnpm-store-

            - name: Install dependencies
              run: pnpm install

            - name: Lint ts files
              run: pnpm lint

    build:
        name: Build app
        needs:
            - changes
        if: needs.changes.outputs.isNewVer == 'true'
        strategy:
            fail-fast: false
            matrix:
                platform: [windows-latest, macos-latest, ubuntu-20.04]
        runs-on: ${{ matrix.platform }}

        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Install Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: 20

            - uses: pnpm/action-setup@v2
              name: Install pnpm
              with:
                  version: 8
                  run_install: false

            - name: Get pnpm store directory
              shell: bash
              run: |
                  echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

            - uses: actions/cache@v3
              name: Setup pnpm cache
              with:
                  path: ${{ env.STORE_PATH }}
                  key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
                  restore-keys: |
                      ${{ runner.os }}-pnpm-store-

            - name: Install dependencies (ubuntu only)
              if: matrix.platform == 'ubuntu-20.04'
              run: |
                  sudo apt-get update
                  sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf

            - name: Install Rust stable
              uses: dtolnay/rust-toolchain@stable

            - name: Rust cache
              uses: swatinem/rust-cache@v2
              with:
                  workspaces: './app/backend -> target'

            - name: Install dependencies
              run: pnpm install

            - name: Bump package.json version
              if: needs.changes.outputs.isNewVer == 'true'
              run: npm pkg set version='${{ needs.changes.outputs.newVer }}'

            - name: Build app
              run: pnpm --filter=app build

            - name: Upload binaries - .msi, .setup.exe (windows only)
              uses: actions/upload-artifact@v4
              if: ${{ needs.changes.outputs.isNewVer == 'true' && matrix.platform == 'windows-latest' }}
              with:
                  if-no-files-found: error
                  name: release-${{ needs.changes.outputs.newVer }}-windows
                  path: |
                      app/backend/target/release/bundle/**

            - name: Upload binary - .dmg (macos only)
              uses: actions/upload-artifact@v4
              if: ${{ needs.changes.outputs.isNewVer == 'true' && matrix.platform == 'macos-latest' }}
              with:
                  if-no-files-found: error
                  name: release-${{ needs.changes.outputs.newVer }}-macos-dmg
                  path: |
                      app/backend/target/release/bundle/dmg/inner-ink_*_x64.dmg

            - name: Upload binary - .deb (ubuntu only)
              uses: actions/upload-artifact@v4
              if: ${{ needs.changes.outputs.isNewVer == 'true' && matrix.platform == 'ubuntu-20.04' }}
              with:
                  if-no-files-found: error
                  name: release-${{ needs.changes.outputs.newVer }}-ubuntu-deb
                  path: |
                      app/backend/target/release/bundle/deb/inner-ink_${{ needs.changes.outputs.newVer }}_amd64.deb

            - name: Upload binary - .appimage (ubuntu only)
              uses: actions/upload-artifact@v4
              if: ${{ needs.changes.outputs.isNewVer == 'true' && matrix.platform == 'ubuntu-20.04' }}
              with:
                  if-no-files-found: error
                  name: release-${{ needs.changes.outputs.newVer }}-ubuntu-appimage
                  path: |
                      app/backend/target/release/bundle/appimage/inner-ink_${{ needs.changes.outputs.newVer }}_amd64.AppImage

    release:
        needs:
            - changes
            - build
            - ts-lint
        if: ${{ needs.changes.outputs.isNewVer == 'true' }}
        name: Release
        runs-on: ubuntu-latest

        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0
                  persist-credentials: false

            - name: Install Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: 20

            - uses: pnpm/action-setup@v2
              name: Install pnpm
              with:
                  version: 8
                  run_install: false

            - name: Get pnpm store directory
              shell: bash
              run: |
                  echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

            - uses: actions/cache@v3
              name: Setup pnpm cache
              with:
                  path: ${{ env.STORE_PATH }}
                  key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
                  restore-keys: |
                      ${{ runner.os }}-pnpm-store-

            - name: Install dependencies
              run: pnpm install -w

            - name: Download binaries
              uses: actions/download-artifact@v4
              with:
                  path: release-artifacts/

            - name: Release new app version
              run: pnpm release
              env:
                  GH_TOKEN: ${{ secrets.GH_TOKEN }}
                  GIT_AUTHOR_NAME: Barinderpreet Singh
                  GIT_AUTHOR_EMAIL: naffydharni006@gmail.com
                  GIT_COMMITTER_NAME: Barinderpreet Singh
                  GIT_COMMITTER_EMAIL: naffydharni006@gmail.com
